// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Client {
  id       String    @id @default(cuid())
  title    String?
  users    User[]
  products Product[]
  orders   Order[]
  blogPosts BlogPost[]
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  phone             String?            @unique
  password          String?
  referralCode      String?            @unique
  verificationCode  String?
  MFAMethod         String?
  isMFA             Boolean            @default(false)
  isAdmin           Boolean            @default(false)
  isPremium         Boolean            @default(false)
  isEmailVerified   Boolean            @default(false)
  isPhoneVerified   Boolean            @default(false)
  isKYC             Boolean            @default(false)
  isBanned          Boolean            @default(false)
  isEmailSubscribed Boolean            @default(false)
  googleIntegration GoogleIntegration?
  cart              Cart?
  orders            Order[]
  referralsProvided Referral[]         @relation("referralsProvided")
  referralsUsed     Referral[]         @relation("referralsUsed")
  blogPosts         BlogPost[]
  client            Client             @relation(fields: [clientId], references: [id])
  clientId          String
}

model GoogleIntegration {
  email   String  @unique
  name    String?
  picture String?
  locale  String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @id @unique
}

model Product {
  id            String          @id @default(cuid())
  title         String
  description   String?
  category      String?
  subCategories String?
  isPhysical    Boolean         @default(false)
  images        ProductImage[]
  listings      Listing[]
  client        Client          @relation(fields: [clientId], references: [id])
  clientId      String
}

model ProductImage {
  id String @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  url       String
}

model Listing {
  id        String  @id @default(cuid())
  carts     Cart[]
  price     Int     @default(10000000)
  stock     Int     @default(0)
  discount  Int     @default(0)
  platform  String?
  region    String?
  size      String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id          String    @id @default(cuid())
  isPaid      Boolean   @default(false)
  isDelivered Boolean   @default(false)
  referral    Referral?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    String
}

model Referral {
  id                 String @id @default(cuid())
  order              Order  @relation(fields: [orderId], references: [id])
  orderId            String @unique
  referralProvider   User   @relation("referralsProvided", fields: [referralProviderId], references: [id])
  referralProviderId String
  referralUser       User   @relation("referralsUsed", fields: [referralUserId], references: [id])
  referralUserId     String
}

model Cart {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  items           Listing[]
  deliveryAddress String
  isPhysical      Boolean   @default(false)
  referralCode    String
  discountCode    String
  totalCost       Int
  discountCost    Int
  payableCost     Int
}

model BlogPost {
  id          String @id @default(cuid())
  title       String
  image       String
  description String 
  author      User   @relation(fields: [authorId], references: [id])
  authorId    String
  client            Client             @relation(fields: [clientId], references: [id])
  clientId          String
}

model Views {
  id  String @id
  count BigInt @default(1)
}
